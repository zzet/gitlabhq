class Legacy::Comment < LegacyDb
  #include Gitorious::Search

  belongs_to :user
  belongs_to :target, :polymorphic => true
  belongs_to :project
  has_many   :events, :as => :target, :dependent => :destroy

  serialize :state_change, Array

  named_scope :with_shas, proc{|*shas|
    {:conditions => { :sha1 => shas.flatten }, :include => :user}
  }

  named_scope :visible_by, proc{|user|
    user = Legacy::User.new({ :is_admin => false }) unless user.is_a?(Legacy::User)
    { :conditions => [
      "projects.private = :private
      or projects.owner_type = :user and projects.owner_id = :user_id
      or projects.owner_type = :group and exists (
        select m1.id
        from memberships as m1
        where m1.user_id = :user_id and m1.group_id = projects.owner_id
      )
      or comments.target_type = :repository and exists (
        select c.id
        from committerships as c
        inner join repositories as r on c.repository_id = r.id
        where r.id = comments.target_id and (
          c.committer_type = :user and c.committer_id = :user_id
          or c.committer_type = :group and exists (
            select m2.id
            from memberships as m2
            where m2.user_id = :user_id and m2.group_id = c.committer_id
          )
        )
      )", {
          :user => 'User',
          :user_id => user.id,
          :group => 'Group',
          :repository => 'Repository',
          :private => false
      }], :joins => :project
    } unless user.site_admin?
  }

  NOTIFICATION_TARGETS = [ Legacy::MergeRequest, Legacy::MergeRequestVersion ]

  def deliver_notification_to(another_user)
    message_body = "#{user.title} commented:\n\n#{body}"
    if [Legacy::MergeRequest, Legacy::MergeRequestVersion].include?(target.class)
      if state_change
        message_body << "\n\nThe status of your merge request"
        message_body << " is now #{state_changed_to}"
      end
      subject_class_name = "merge request"
    else
      subject_class_name = target.class.human_name.downcase
    end
    message = Legacy::Message.new({
      :sender => self.user,
      :recipient => another_user,
      :subject => "#{user.title} commented on your #{subject_class_name}",
      :body => message_body,
      :notifiable => self.target,
    })
    message.save
  end

  def state=(new_state)
    return if new_state.blank?
    result = []
    if applies_to_merge_request?
      return if target.status_tag.to_s == new_state
      result << (target.status_tag.nil? ? nil : target.status_tag.name)
    end
    result << new_state
    self.state_change = result
  end

  def state_changed_to
    state_change.to_a.last
  end

  def state_changed_from
    state_change.to_a.size > 1 ? state_change.first : nil
  end

  def body_required?
    if applies_to_merge_request?
      return state_change.blank?
    else
      return true
    end
  end

  # +lines_str+ is a representation of the first and last line-number
  # tuple (as generated by Diff::Unified::Generator) and the lines the
  # comment span, in the follow format:
  # first_tuple:last_tuple+line_span
  def lines=(lines_str)
    start, rest = lines_str.split(":")
    raise "invalid lines format" if rest.blank?
    last, amount = rest.split("+")
    if start.blank? || last.blank? || amount.blank?
      raise "invalid lines format"
    end
    self.first_line_number = start
    self.last_line_number = last
    self.number_of_lines = amount
  end

  def lines
    "#{self.first_line_number}:#{self.last_line_number}+#{self.number_of_lines}"
  end

  def sha_range
    first, last = sha1.split("-")
    first..(last||first)
  end

  def applies_to_line_numbers?
    return !first_line_number.blank?
  end

  def applies_to_merge_request?
    Legacy::MergeRequest === target
  end

  def editable_by?(a_user)
    creator?(a_user) && recently_created?
  end

  def creator?(a_user)
    a_user == user
  end

  def recently_created?
    created_at > 10.minutes.ago
  end

  protected
    def notify_target_if_supported
      if target && NOTIFICATION_TARGETS.include?(target.class)
        if self.target === Legacy::MergeRequestVersion
          target_user = target.merge_request.user
        else
          target_user = target.user
        end
        return if target_user == user
        deliver_notification_to(target_user)
      end
    end

    def update_state_in_target
      if applies_to_merge_request? and state_change
        target.with_user(user) do
          if target.resolvable_by?(user)
            target.status_tag=(state_changed_to)
            target.create_status_change_event(body)
          end
        end
      end
    end

end
